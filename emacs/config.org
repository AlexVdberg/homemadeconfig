#+TITLE: My Emacs Configuration
#+AUTHOR: Alex Vandenberg
#+EMAIL: a.vandenberg0175@gmail.com

* Repos and Core Packages
** Bootstrap straight.el

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Setup ~use-package~ if not already
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+end_src

** Folder locations and Variables
#+begin_src emacs-lisp
  (setq org-roam-directory "~/org-roam/")
#+end_src

** el-patch for patches
#+begin_src emacs-lisp
  (use-package el-patch
    :ensure t)
#+end_src

#+RESULTS:

* Core Setup
** Separate <tab> and <C-i>

#+begin_src emacs-lisp
  (define-key input-decode-map [?\C-i] [C-i])
  (define-key input-decode-map [?\C-\S-i] [C-S-i])
#+end_src

** Line Numbering
Use hybrid relative mode. This means the current line is absolute, but all others are relative.

#+begin_src emacs-lisp
    (setq-default display-line-numbers 'visual
	display-line-numbers-width-start t
	display-line-numbers-current-absolute nil)
#+end_src

** Line Wraping

#+begin_src emacs-lisp
  (with-eval-after-load 'org       
    (add-hook 'org-mode-hook #'visual-line-mode))
  ;;(global-visual-line-mode)
#+end_src

*** Visual Fill Column
Wraps lines at fill-column
#+begin_src emacs-lisp
  ;;(add-hook 'text-mode-hook #'auto-fill-mode)

  ;; make visual line wrap at 80 characters
  (use-package visual-fill-column
    :config
    (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
    (setq-default fill-column 80)
    (setq org-tags-column -80)
    :ensure t)
#+end_src

Fix line number shifting column.
See https://codeberg.org/joostkremers/visual-fill-column/issues/1
#+begin_src emacs-lisp
    (eval-after-load 'visual-fill-column
      `(defun visual-fill-column--set-margins (window)
      "Set window margins for WINDOW."
      ;; Calculate left & right margins.
      (let* ((total-width (window-max-chars-per-line))
	     (width (or visual-fill-column-width
			fill-column))
	     (margins (if (< (- total-width width) 0) ; margins must be >= 0
			  0
			(- total-width width)))
	     (left (if visual-fill-column-center-text
		       (/ margins 2)
		     0))
	     (right (- margins left)))
  
	(if visual-fill-column-extra-text-width
	    (let ((add-width (visual-fill-column--add-extra-width left right visual-fill-column-extra-text-width)))
	      (setq left (car add-width)
		    right (cdr add-width))))
  
	;; put an explicitly R2L buffer on the right side of the window
	(when (and (eq bidi-paragraph-direction 'right-to-left)
		   (= left 0))
	  (setq left right)
	  (setq right 0))
  
	(set-window-margins window left right)))
    )
#+end_src

An alternative solution might be found [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28246][in this bug report]]. This causes it to read the max line number and set it to that.
This [[https://www.reddit.com/r/emacs/comments/8pfdlb/weird_shifting_problem_with_new_emacs_line_numbers/][bug was reported]] but nothing helpful came from it. They just pointed to the ~display-line-numbers-width-start~ and ~display-line-numbers-grow-only~ options.

*** Adaptive Wrap
Visually wrap bullet point lines without changing the text.
This might need to be defined after visual fill column. Might be a good idea to force this. Could probably add it to the ~eval-after-load~ block.
There may be a better place for me to enable adaptive-wrap-prefix-mode.
#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :ensure t)
  (add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode)
#+end_src

*** phscroll

#+begin_src emacs-lisp
  (straight-use-package '(phscroll :host github
				   :repo "misohena/phscroll"
				   :branch "master"))
  (setq org-startup-truncated nil)
  (with-eval-after-load "org"
    (require 'org-phscroll))
#+end_src

** Key Bindings
*** Rebing C-u universal argument
=evil-mode= uses =C-u= for scrolling. The universal argument is still useful.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-M-u") 'universal-argument)
#+end_src

*** ESC Cancels All

#+begin_src emacs-lisp
  ;; Stop keyboard-escape-quit from closing all other windows in some instances
  (defadvice keyboard-escape-quit
      (around keyboard-escape-quit-dont-close-windows activate)
    (let ((buffer-quit-function (lambda () ())))
      ad-do-it))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Window Managment
#+begin_src emacs-lisp
  (use-package window
    ;; Built-in. Dont load with package.el
    :ensure nil
    :custom
    ;; Change window selection
    (display-buffer-base-action
      '(display-buffer-same-window
	display-buffer-reuse-mode-window
	display-buffer-reuse-window))
    (display-buffer-alist
     '(
       ("\\*Org Select\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . 0))
       ("\\*org-roam\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . 1))
       ("\\*help\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . 0))
       ("\\*Warnings\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . 3))
       ("CAPTURE-*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . 2))
      )
    )
  )

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)

  ;; Auto select help window when it opens
  (setq help-window-select t)

  ;; Follow links in same window instead of new one.
  ;; Does not change behavior of other commands that make new windows.
  (add-to-list 'org-link-frame-setup '(file . find-file))
#+end_src

#+RESULTS:
: ((file . find-file) (vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame))

** Splash Screen
Remove the splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
#+end_src

** Menu Bar
Switch the Menubar off by default
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src

But still let me easily toggle it on/off
#+begin_src emacs-lisp
  ;; Toggle menubar keybind
  (global-set-key (kbd "C-c m") 'menu-bar-mode)
#+end_src

** Tool bar
Remove the toolbar.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** Mode Line
Show the line and column number.
#+begin_src emacs-lisp
  (setq column-number-mode t)
  (setq line-number-mode t)
#+end_src

* Theme and Visuals
** Install themes
#+begin_src emacs-lisp
  (use-package doom-themes
     :ensure t)
#+end_src

** Prefered theme
#+begin_src emacs-lisp
  (load-theme 'doom-nord t)
#+end_src

** COMMENT Font
Used for testing purposes
#+begin_src emacs-lisp
    (require 'cl-lib)
  (require 'cl-extra)
  (let ((str "The quick brown fox jumps over the lazy dog ´`''\"\"1lI|¦!Ø0Oo{[()]}.,:; ")
	(font-families (cl-remove-duplicates 
			(sort (font-family-list) 
			      (lambda(x y) (string< (upcase x) (upcase y))))
			:test 'cl-equalp)))
    (dolist (ff font-families)
      (insert 
       (propertize str 'font-lock-face `(:family ,ff))               ff "\n"
       (propertize str 'font-lock-face `(:family ,ff :slant italic)) ff "\n"))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    ;; control the mini buffer with evil key bindings
    (setq evil-want-minibuffer t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t)

    ;; Make evil-mode up/down operate in screen lines instead of logical lines
    (define-key evil-motion-state-map "j" 'evil-next-visual-line)
    (define-key evil-motion-state-map "k" 'evil-previous-visual-line)
    ;; Also in visual mode
    (define-key evil-visual-state-map "j" 'evil-next-visual-line)
    (define-key evil-visual-state-map "k" 'evil-previous-visual-line)

    (evil-set-leader 'normal (kbd "SPC"))
    (evil-define-key 'normal 'global (kbd "<leader>nf") 'org-roam-node-find)
    (evil-define-key 'normal 'global (kbd "<leader>ni") 'org-roam-node-insert)
    (evil-define-key 'normal 'global (kbd "<leader>c") 'org-capture)
    (evil-define-key 'normal 'global (kbd "<leader>c") 'org-capture)

    ;; Undo redo doesnt seem to work properly
    (define-key evil-normal-state-map (kbd "C-r") 'undo-redo)
    (use-package evil-org
      :ensure t
      :after org
      :hook (org-mode . (lambda () evil-org-mode))
      :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys))
  )
#+end_src

#+RESULTS:
: t

** Fix tab and C-i keys

Evil mode messes with the emacs key bindings for ~TAB~ and ~C-i~ because in terminal these are the same thing. I found [[https://github.com/wasamasa/dotemacs/blob/master/init.org][someone's emacs file]] that solves these problems in an elegant way.
Anything not bound in evil mode will pass through to emacs. SPC, RET and TAB are not useful in vim.
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    ;; C-i in terminal is the same as TAB. Re-bind C-i to vim
    (define-key evil-motion-state-map (kbd "<C-i>") 'evil-jump-forward))
  ;; other posiblities for the tab C-i problem
  ;;(define-key input-decode-map [?\C-i] [C-i])
  ;;(define-key input-decode-map [?\C-\S-i] [C-S-i])
  ;;(map! :map 'evil-motion-state-map "C-i" nil)
  ;;(global-set-key (kbd "<C-i>") 'evil-jump-forward)
#+end_src

** Evil colleciton

#+begin_src emacs-lisp
  (use-package evil-collection
    :after (evil magit)
    :ensure t
    :config
    (evil-collection-init '(dired magit)))
#+end_src

#+RESULTS:
: t

* Vulpea
This provides extra functionality to org agenda
#+begin_src emacs-lisp
    (use-package vulpea
      :ensure t
      :demand t
      ;; hook into org-roam-db-autosync-mode you wish to enable
      ;; persistence of meta values (see respective section in README to
      ;; find out what meta means)
      :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable))
      :preface
      (defun vulpea-agenda-category (&optional len)
	"Get category of item at point for agenda.

      Category is defined by one of the following items:

      - CATEGORY property
      - TITLE keyword
      - TITLE property
      - filename without directory and extension

      When LEN is a number, resulting string is padded right with
      spaces and then truncated with ... on the right if result is
      longer than LEN.

      Usage example:

	(setq org-agenda-prefix-format
	  '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

      Refer to `org-agenda-prefix-format' for more information."
	(let* ((file-name (when buffer-file-name
			(file-name-sans-extension
			 (file-name-nondirectory buffer-file-name))))
	   (title (vulpea-buffer-prop-get "title"))
	   (category (org-get-category))
	   (result
	    (or (if (and
		     title
		     (string-equal category file-name))
		    title
		  category)
		"")))
	(if (numberp len)
	  (s-truncate len (s-pad-right len " " result))
	result)))
      (defun vulpea-agenda-title (&optional len)
	"Get title of item at point for agenda.
         Ignore the category.

      When LEN is a number, resulting string is padded right with
      spaces and then truncated with ... on the right if result is
      longer than LEN.

      Refer to `org-agenda-prefix-format' for more information."
	(let* ((file-name (when buffer-file-name
			(file-name-sans-extension
			 (file-name-nondirectory buffer-file-name))))
	   (title (vulpea-buffer-prop-get "title"))
	   (category (org-get-category))
	   (result
	    (or (if (and
		     title
		     (string-equal category file-name))
		    title
		  title)
		"")))
	(if (numberp len)
	  (s-truncate len (s-pad-right len " " result))
	result)))
  )


#+end_src

* Org
#+begin_src emacs-lisp
  (use-package org
    :after (vulpea)
    :config
    (setq org-M-RET-may-split-line nil)
    (setq org-return-follows-link  t)
    (setq org-todo-keywords
      `((sequence "TODO(t)" "WAITING(w)" "NEXT(n)"
		  "|" "DONE(d)" "STALE(s)")
	(sequence "ACTIVE(a)" "|" "COMPLETE(C)")
	(sequence "BACKLOG(b)" "MAYBE(m)" "|" "CANCLED(c)")))

    (setq org-image-actual-width nil)
    (setq org-capture-templates
    `(("n" "Note" entry (file ,(concat org-roam-directory "inbox.org"))
       "* %?")
      ("a" "Acrynm" table-line (file ,(concat org-roam-directory
       "20230913165015-acrynms.org"))
       "| %^{Acrynm} | %? |")
      ("t" "Todo" entry (file ,(concat org-roam-directory "inbox.org"))
       "* TODO %?")))
    )
#+end_src

** Org Agenda
#+begin_src emacs-lisp
  ;;(setq org-work-directory "~/org-roam/work/")
  ;;'(org-agenda-files (list org-roam-directory org-work-directory)))
  ;;(list org-roam-directory org-work-directory)
#+end_src


#+begin_src emacs-lisp

  (use-package org-agenda
    ;; Built-in. Dont load with package.el
    :ensure nil
    :after (org)
    :config
    (setq org-agenda-tags-column -80)

    (setq org-directory "~/org-roam/")
    (setq org-work-directory "~/org-roam/work/")
    (setq org-agenda-files (list org-roam-directory org-work-directory))
    ;;  (setq org-agenda-files (append
    ;;                        (directory-files-recursively org-roam-directory org-agenda-file-regexp)))
    (setq org-agenda-prefix-format '(
      ;; (agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
      (agenda  . " %i • %?-12t% s")
      ;; (agenda  . "  • ")
      (timeline  . "  % s")
      (todo  . " %i %-12:c")
      (tags  . " %i %-12:c")
      (search . " %i %-12:c")))
    (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)

    (setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
	 ((agenda "" nil)
	(alltodo "" nil))
	 nil)

	("x" "Agenda and next action items"
	((agenda "" nil)
	 (tags "+CATEGORY=\"work\"+TODO=\"NEXT\""
	   ((org-agenda-overriding-header "Work Next Tasks")
	    (org-agenda-prefix-format '(
		  (tags  . " %i %(vulpea-agenda-title 12) ")
	     )
	    )
	   )
	 )
	 (tags "+CATEGORY=\"work\"+TODO=\"WAITING\""
	   ((org-agenda-overriding-header "Work Waiting Tasks")
	    (org-agenda-prefix-format '(
		  (tags  . " %i %(vulpea-agenda-title 12) ")
	     )
	    )
	   )
	 )
	 (tags "+CATEGORY=\"work-related\"+TODO=\"NEXT\""
	   ((org-agenda-overriding-header "Work Related Tasks")
	    (org-agenda-prefix-format '(
		  (tags  . " %i %(vulpea-agenda-title 12) ")
	     )
	    )
	   )
	 )
	 (tags "-CATEGORY=\"work\"-CATEGORY=\"work-related\"+TODO=\"NEXT\""
	   ((org-agenda-overriding-header "Everything Else Next Tasks")
	    (org-agenda-prefix-format '(
		  (agenda  . " %i %(vulpea-agenda-title 12)%?-12t% s")
		  (todo  . " %i %(vulpea-agenda-title 12) ")
		  (tags  . " %i %(vulpea-agenda-title 12) ")
		  (search . " %i %(vulpea-agenda-title 12) "))
	    )
	   )
	 )
	 (tags "-CATEGORY=\"work\"+TODO=\"WAITING\""
	   ((org-agenda-overriding-header "Everything Else Waiting Tasks")
	    (org-agenda-prefix-format '(
		  (agenda  . " %i %(vulpea-agenda-title 12)%?-12t% s")
		  (todo  . " %i %(vulpea-agenda-title 12) ")
		  (tags  . " %i %(vulpea-agenda-title 12) ")
		  (search . " %i %(vulpea-agenda-title 12) "))
	    )
	   )
	 )
	)
	nil nil)))
    )
#+end_src

#+RESULTS:
: t

** Org mode key bindings
Bindings for following links with mouse and hjkl.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
   (define-key org-mode-map (kbd "<mouse-8>") #'org-mark-ring-goto)
   (define-key org-mode-map (kbd "<mouse-9>") #'org-open-at-point)
   (define-key org-mode-map (kbd "C-S-M-k") #'org-open-at-point)
   (define-key org-mode-map (kbd "C-S-M-j") #'org-mark-ring-goto)
   (define-key org-mode-map (kbd "C-S-M-l") #'org-next-link)
   (define-key org-mode-map (kbd "C-S-M-h") #'org-previous-link)
  )
#+end_src

** Org Babel

Activate babel languages
#+begin_src emacs-lisp
  ;; activate languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

** Org Structure Templates
#+begin_src emacs-lisp
  (setq org-structure-template-alist '(("a" . "export ascii")
				       ("c" . "center")
				       ("C" . "comment")
				       ("e" . "example")
				       ("E" . "export")
				       ("h" . "export html")
				       ("l" . "log")
				       ("L" . "export latex")
				       ("q" . "quote")
				       ("s" . "src")
				       ("v" . "verse")))
#+end_src

** Org Capture window patch
The org capture window deletes all other windows when doing a capture. This is very anoying. Patch out the ~delete-other-window~ call.
#+begin_src emacs-lisp
  (setq el-patch-warn-on-eval-template nil)
  (el-patch-feature org-capture)
  (with-eval-after-load 'org-capture
    (el-patch-define-and-eval-template
     (defun org-capture-place-template)
     (el-patch-remove (delete-other-windows))))
#+end_src

#+RESULTS:
: org-capture-place-template
*** TODO Fix el-patch to not warn on eval template

* Org-roam
#+begin_src emacs-lisp
    (use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :init
      :bind (("C-S-M-n i" . org-roam-node-insert)
	     ("C-S-M-n f" . org-roam-node-find))
      :config
	(org-roam-db-autosync-mode)
	(setq org-roam-capture-templates
	  '(("d" "default" plain
	     "%?"
	     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	     :unnarrowed t)
	    ("c" "Contact" plain
	     "%?"
	     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
	     "
  :PROPERTIES:
  :END:
  ,#+TITLE: ${title}
  ,* %{title}'s Birthday\n\n
  ,* Phone Number\n\n
  ,* Address\n\n
  "
	     )
	    )

	    ("j" "Jira" plain
	     "%?"
	     :if-new (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org"
	     "
  :PROPERTIES:
  :ROAM_ALIASES: %^{aliases}
  :CATEGORY: work
  :END:
  ,#+TITLE: ${title}
  "
	     )
	    )
	    ("w" "Work" plain
	     "%?"
	     :if-new (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org"
	     "
  :PROPERTIES:
  :CATEGORY: work
  :END:
  ,#+TITLE: ${title}
  "
	     )
	   )
	    ("r" "Work Related" plain
	     "%?"
	     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
	     "
  :PROPERTIES:
  :CATEGORY: work-related
  :END:
  ,#+TITLE: ${title}
  "
	     )
	   )
	    ("f" "Writing" plain
	     "%?"
	     :if-new (file+head "writing/%<%Y%m%d%H%M%S>-${slug}.org"
	     "
  :PROPERTIES:
  :CATEGORY: writing
  :END:
  ,#+TITLE: ${title}
  "
	     )
	   )
	  )
	)
      :ensure t
      )
#+end_src

#+RESULTS:
: org-roam-node-find

* Vertico

VERTical Interative COmpletion. Pops up the mini buffer to show completion posiblities. I would prefer it if it popped up bottom up instead of top down.

Use ~vertico-reverse-mode~ to get bottom up completion. Still need the regular ~vertico-mode~ enabled for it to work.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
	   ("C-j" . vertico-next)
	   ("C-k" . vertico-previous)
	   ("C-f" . vertico-exit)
	   :map minibuffer-local-map
	   ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    (vertico-reverse-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** NEXT vim ex ":" automatic completion.
** TODO reverse mode not always shrinking

* Consult (Searching)
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :config
    (global-set-key (kbd "C-S-M-p") #'consult-ripgrep)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; my/command-wrapping-consult    ;; disable auto previews inside my command
     :preview-key '(:debounce 0.4 any) ;; Option 1: Delay preview
     )
    ;; add '-L' to follow sym-links
    (setq consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /   --smart-case --no-heading --with-filename --line-number --search-zip -L")
    )
#+end_src

#+RESULTS:
: t

* Completion

Compleions that work similar to narrowing in vim's fzf buffer. Allows narrowing by partial typing.

Need to look into flex-style matching. It sounds similar to fussy.

#+begin_src emacs-lisp
(use-package fussy
  :ensure t
  :config
  (push 'fussy completion-styles)
  (setq
   ;; For example, project-find-file uses 'project-files which uses
   ;; substring completion by default. Set to nil to make sure it's using
   ;; flx.
   completion-category-defaults nil
   completion-category-overrides nil))
#+end_src

** COMMENT Hotfuzz
A better scoring algorithm? Appears to break the narrowing style that I prefer.
I will have to test more.

#+begin_src emacs-lisp
(use-package hotfuzz
  :ensure t
  :config
  (setq fussy-score-fn 'fussy-hotfuzz-score))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

* Company mode

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    )
#+end_src

#+RESULTS:

* LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (c-mode . lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 10240 1024)) ;; 2mb
    (setq lsp-clients-clangd-executable "/home/MAGICLEAP/avandenberg/local/bin/clangd")
    (setq lsp-enable-snippet nil)
    (setq lsp-warn-no-match-clients nil)
    ;;(setq lsp-clients-clangd-args '("--background-index"))
    )
#+end_src

** lsp-java

#+begin_src emacs-lisp
  (use-package lsp-java
    :after (lsp)
    :config
    (add-hook 'java-mode-hook 'lsp)
    :init
    (setq lsp-java-imports-gradle-wrapper-checksums
	  [
	   (:sha256 "e2b82129ab64751fd40437007bd2f7f2afb3c6e41a9198e628650b22d5824a14"
		    :allowed t)
	   (:sha256 "66008236d4dd3eb81bf343b12a95350142ad85c996945ff2cbfdb14bde432498"
		    :allowed t)
	   (:sha256 "683c84e09ad53777228f43b0b54b421c1d83b15df7fd6f7e3567a1a8f1d6a76c"
		    :allowed t)
	   (:sha256 "0d11b3cdba67011004a49e8585fcdb1f3a2563abbaccba6ceccabf65c3c20ed6"
		    :allowed t)
	   (:sha256 "ee3739525a995bcb5601621a6e2daec1f183bbefc375743acc235cec33547e04"
		    :allowed t)
	   (:sha256 "ee3739525a995bcb5601621a6e2daec1f183bbefc375743acc235cec33547e04"
		    :allowed t)
						     ])
    )
#+end_src

#+RESULTS:
: t

*** Error when compiling
java.lang.RuntimeException: SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.

#+begin_src emacs-lisp
  ;;  (setenv "JAVA_HOME" "/usr/lib/jvm/java-14-openjdk-amd64")
  (setenv "ANDROID_HOME" "~/Android/Sdk/")
  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx2G" "-Xms100m"))
#+end_src

#+RESULTS:
: ~/Android/Sdk

*** Java Heap Space
Dec 19, 2023, 10:03:04 AM An internal error occurred during: "Updating workspace".
Java heap space
java.lang.OutOfMemoryError: Java heap space

Dec 19, 2023, 10:03:04 AM Unhandled error
Java heap space
java.lang.OutOfMemoryError: Java heap space

** lsp-python

#+begin_src emacs-lisp
  (use-package pyvenv
    :after (lsp)
    :ensure t
    )
#+end_src

** Consult-lsp

#+begin_src emacs-lisp
  (use-package consult-lsp
    :ensure t
    :after (lsp)
    )
#+end_src

#+RESULTS:

* Winner mode
Use winner mode with =Ctrl-c <left>= and =Ctrl-c <right>= to go back and forward in buffer history.

#+begin_src emacs-lisp
  (use-package winner
    :init
    (winner-mode 1)
    )
#+end_src

#+RESULTS:

* mermaid diagrams

Following advice from a [[https://sachachua.com/blog/2023/10/getting-mermaid-js-running-on-my-system-needed-to-symlink-chromium-for-puppeteer/][blog post on configuring mermaid]] to get mmdc working.

#+begin_src emacs-lisp
  (use-package ob-mermaid
    :after (org)
    :config
    ;; set mermaid path
    (setq ob-mermaid-cli-path "/usr/bin/mmdc")
    ;; activate languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((mermaid . t)
       (scheme . t)))
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
    )
#+end_src

#+RESULTS:
: t

* image+

#+begin_src emacs-lisp
  (use-package image+
    :after (iamge)
    (eval-after-load 'image '(require 'image+))
  )
#+end_src

* smart-tabs

Produces a combination of tabs and spaces based on what is needed.

#+begin_src emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :init
    ;; c-basic-offset must be setq-default because it is per buffer
    ;; alternative could be to use "(set-variable 'c-file-style "gnu")"
    (setq-default c-basic-offset 8)
    :config
    (setq indent-tabs-mode t)
    (smart-tabs-add-language-support py python-mode-hook
      ((python-indent-line-function . standard-indent)))
    (smart-tabs-insinuate 'c 'c++ 'java 'py)
    )
#+end_src

